---
layout: post
title:  Merge Sort and Quick Sort
tags: Java
categories: Code
---
Merge Sort

```java
public class MergeSort {
    public int[] MergeSort(int[] nums, int low, int high) {
        if (low < high){
            int mid = (low + high) / 2;
            MergeSort(nums, low, mid);
            MergeSort(nums, mid + 1, high);
            merge(nums, low, mid, high);
        }
        if (low == 0 && high == 4){
            System.out.printf("%d, %d, %d, %d, %d\n", nums[0], nums[1],nums[2], nums[3], nums[4]);
        }
        return nums;
    }
    public void merge(int[] nums, int low, int mid, int high){
        int[] aux = nums.clone();
        int left = low;
        int right = mid + 1;
        int cur = low;
        while (left <= mid ||right <= high){
            if (right > high || left <= mid && aux[left] < aux[right]){
                nums[cur] = aux[left];
                left ++;
            }else{
                nums[cur] = aux[right];
                right ++;
            }
            cur ++;
        }
        return;
    }
 }
```

new

Quick Sort

{{% hightlight java %}}

{{% endhighlight }}
public class QuickSort {
    public int[] QuickSort(int[] nums, int low, int high) {
        if (low < high){
            int j = partition(nums, low, high);
            QuickSort(nums, low, j - 1);
            QuickSort(nums, j + 1, high);
        }
        if (low == 0 && high == 4){
            System.out.printf("%d, %d, %d, %d, %d\n", nums[0], nums[1],nums[2], nums[3], nums[4]);
        }
        return nums;
    }
    public int partition(int[] nums, int low, int high){
        int temp = nums[low];
        while(low < high){
            while(low < high && nums[high] > temp){
                high--;
            }
            nums[low] = nums[high];
            while (low < high && nums[low] < temp){
                low++;
            }
            nums[high] = nums[low];
        }
        nums[low] = temp;
        return low;
    }
}
{{ page.date | date_to_string }}